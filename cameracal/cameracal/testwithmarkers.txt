FileStorage fs("imagepoints.xml", FileStorage::READ); // Read the settings
	if (!fs.isOpened())
	{
		cout << "Could not open the configuration file: \"" << "imagepoints.xml" << "\"" << endl;
		return -1;
	}
	else
	{
		cout << "Yeah bitches!" << endl;
	}

	Mat newmat;
	vector<int> camid;
	vector<vidcamera> vidvec;
	double squaresize = 1;
	int camerano = 2;
	int image_no = 5;
	int totalpts = 35;
	vector<vector<vector<vector<Point2f>>>> imgs(camerano, vector<vector<vector<Point2f>>>(camerano, vector<vector<Point2f>>(image_no, vector<Point2f>(totalpts))));
	vector<Point2d> vec;
	fs["img_mat"] >> newmat;
	int indexc = 0;
	for (int i = 0; i < camerano; i++)
	{
		for (int j = 0; j < camerano; j++)
		{
			for (int k = 0; k < image_no; k++)
			{
				for (int l = 0; l < totalpts; l++)
				{
					if (i == j);
					else
					{
						Point2f temppoint((newmat.at<double>(indexc, 0)), (newmat.at<double>(indexc, 1)));
						imgs[i][j][k][l] = temppoint;
						indexc++;
					}
				}
			}
		}
	}

	for (int i = 0; i < camerano; i++)
	{
		vidcamera tempcam(i, camerano);
		tempcam.index = i;
		vidvec.push_back(tempcam);
	}

	
	int boardheight = 5;
	int boardwidth = 7;
	getpoints(vidvec, imgs, camerano, image_no, totalpts);
	Size imagesize;
	imagesize.height = 720;
	imagesize.width = 1280;
	for (int i = 0; i<camerano; i++)
		calibratemain(vidvec[i], camerano, image_no, boardheight, boardwidth, 1, imagesize, 0, i);
	for (int i = 0; i<camerano; i++)
		for (int j = i+1; j<camerano; j++)
			stereomain(vidvec[0], vidvec[1], vidvec[0].index, vidvec[1].index, camerano, image_no, boardwidth, boardheight, squaresize, imagesize, 0);

	store(vidvec);

	fillmarker();
	markergetter(vidvec,5);
	//for (int i = 0; i < vidvec[1].markerpts.size(); i++)
	//	for (int j = 0; j < vidvec[1].markerpts[i].size(); j++)
	//		cout << vidvec[1].markerpts[i][j] << endl;
	
	int cam_temp = 2;
	int frameno = 5;
	int markerno = 5;
	vector<vector<vector<vector<Point3f>>>> obj_pts(cam_temp, vector<vector<vector<Point3f>>>(cam_temp, vector<vector<Point3f>>(frameno, vector<Point3f>(markerno))));

	get_3d(vidvec[0], vidvec[1], obj_pts, cam_temp, frameno, markerno);
	get_3d(vidvec[1], vidvec[0], obj_pts, cam_temp, frameno, markerno);

	for(int i = 0; i<camerano; i++)
		for (int j = 0; j < camerano; j++)
		{
			cout << i << " " << j << endl;
			for (int k = 0; k < frameno; k++)
			{
				cout << k << ": " << endl;
				for (int p = 0; p < markerno; p++)
					cout << obj_pts[i][j][k][p] << endl;
			}
		}		

	return 0;